{"id":"vO7K","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/react-bootstrap/package.json","includedInParent":true,"mtime":1671040805866},{"name":"dom-helpers/addClass","loc":{"line":1,"column":21,"index":21},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/BootstrapModalManager.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/addClass.js"},{"name":"dom-helpers/css","loc":{"line":2,"column":16,"index":61},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/BootstrapModalManager.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/css.js"},{"name":"dom-helpers/querySelectorAll","loc":{"line":3,"column":16,"index":96},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/BootstrapModalManager.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/querySelectorAll.js"},{"name":"dom-helpers/removeClass","loc":{"line":4,"column":24,"index":152},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/BootstrapModalManager.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/removeClass.js"},{"name":"@restart/ui/ModalManager","loc":{"line":5,"column":25,"index":204},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/BootstrapModalManager.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/ModalManager.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getSharedManager = getSharedManager;\nvar _addClass = _interopRequireDefault(require(\"dom-helpers/addClass\"));\nvar _css = _interopRequireDefault(require(\"dom-helpers/css\"));\nvar _querySelectorAll = _interopRequireDefault(require(\"dom-helpers/querySelectorAll\"));\nvar _removeClass = _interopRequireDefault(require(\"dom-helpers/removeClass\"));\nvar _ModalManager = _interopRequireDefault(require(\"@restart/ui/ModalManager\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\nclass BootstrapModalManager extends _ModalManager.default {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop];\n    // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n    element.dataset[prop] = actual;\n    (0, _css.default)(element, {\n      [prop]: `${parseFloat((0, _css.default)(element, prop)) + adjust}px`\n    });\n  }\n  restore(prop, element) {\n    const value = element.dataset[prop];\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      (0, _css.default)(element, {\n        [prop]: value\n      });\n    }\n  }\n  setContainerStyle(containerState) {\n    super.setContainerStyle(containerState);\n    const container = this.getElement();\n    (0, _addClass.default)(container, 'modal-open');\n    if (!containerState.scrollBarWidth) return;\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    (0, _querySelectorAll.default)(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));\n    (0, _querySelectorAll.default)(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));\n    (0, _querySelectorAll.default)(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));\n  }\n  removeContainerStyle(containerState) {\n    super.removeContainerStyle(containerState);\n    const container = this.getElement();\n    (0, _removeClass.default)(container, 'modal-open');\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    (0, _querySelectorAll.default)(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));\n    (0, _querySelectorAll.default)(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));\n    (0, _querySelectorAll.default)(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));\n  }\n}\nlet sharedManager;\nfunction getSharedManager(options) {\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\n  return sharedManager;\n}\nvar _default = BootstrapModalManager;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"46704516016d859d637c95b328398786","cacheData":{"env":{}}}