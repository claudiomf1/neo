{"id":"sHp5","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1671040804526},{"name":"react","loc":{"line":1,"column":26,"index":26},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useInterval.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"./useCommittedRef","loc":{"line":2,"column":28,"index":63},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useInterval.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useCommittedRef.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = require(\"react\");\nvar _useCommittedRef = _interopRequireDefault(require(\"./useCommittedRef\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates a `setInterval` that is properly cleaned up when a component unmounted\n *\n * ```tsx\n *  function Timer() {\n *    const [timer, setTimer] = useState(0)\n *    useInterval(() => setTimer(i => i + 1), 1000)\n *\n *    return <span>{timer} seconds past</span>\n *  }\n * ```\n *\n * @param fn an function run on each interval\n * @param ms The milliseconds duration of the interval\n */\n\nfunction useInterval(fn, ms, paused, runImmediately) {\n  if (paused === void 0) {\n    paused = false;\n  }\n  if (runImmediately === void 0) {\n    runImmediately = false;\n  }\n  var handle;\n  var fnRef = (0, _useCommittedRef.default)(fn); // this ref is necessary b/c useEffect will sometimes miss a paused toggle\n  // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.\n\n  var pausedRef = (0, _useCommittedRef.default)(paused);\n  var tick = function tick() {\n    if (pausedRef.current) return;\n    fnRef.current();\n    schedule(); // eslint-disable-line no-use-before-define\n  };\n\n  var schedule = function schedule() {\n    clearTimeout(handle);\n    handle = setTimeout(tick, ms);\n  };\n  (0, _react.useEffect)(function () {\n    if (runImmediately) {\n      tick();\n    } else {\n      schedule();\n    }\n    return function () {\n      return clearTimeout(handle);\n    };\n  }, [paused, runImmediately]);\n}\nvar _default = useInterval;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"701d3adb076f57f4ee09e9b7ae156f13","cacheData":{"env":{}}}