{"id":"TMNl","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/react-bootstrap/package.json","includedInParent":true,"mtime":1671040805866},{"name":"react","loc":{"line":1,"column":23,"index":23},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"prop-types","loc":{"line":2,"column":22,"index":54},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/prop-types/index.js"},{"name":"./Dropdown","loc":{"line":3,"column":21,"index":89},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/Dropdown.js"},{"name":"./DropdownToggle","loc":{"line":4,"column":27,"index":130},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownToggle.js"},{"name":"./DropdownMenu","loc":{"line":5,"column":25,"index":175},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownMenu.js"},{"name":"./types","loc":{"line":6,"column":30,"index":223},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/types.js"},{"name":"react/jsx-runtime","loc":{"line":8,"column":30,"index":313},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/DropdownButton.js","resolved":"/home/claudio/neo/node_modules/react/jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _Dropdown = _interopRequireDefault(require(\"./Dropdown\"));\nvar _DropdownToggle = _interopRequireDefault(require(\"./DropdownToggle\"));\nvar _DropdownMenu = _interopRequireDefault(require(\"./DropdownMenu\"));\nvar _types = require(\"./types\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: _propTypes.default.string,\n  /** An `href` passed to the Toggle component */\n  href: _propTypes.default.string,\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: _propTypes.default.func,\n  /** The content of the non-toggle Button.  */\n  title: _propTypes.default.node.isRequired,\n  /** Disables both Buttons  */\n  disabled: _propTypes.default.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: _types.alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: _propTypes.default.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: _propTypes.default.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: _propTypes.default.string,\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: _propTypes.default.oneOf(['dark']),\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: _propTypes.default.bool,\n  /** @ignore */\n  bsPrefix: _propTypes.default.string,\n  /** @ignore */\n  variant: _propTypes.default.string,\n  /** @ignore */\n  size: _propTypes.default.string\n};\n\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  flip,\n  ...props\n}, ref) => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Dropdown.default, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_DropdownToggle.default, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_DropdownMenu.default, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    flip: flip,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nvar _default = DropdownButton;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"51983f82e1e143b1adb39c173ccfa757","cacheData":{"env":{}}}