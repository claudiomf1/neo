{"id":"TNit","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/react-bootstrap/package.json","includedInParent":true,"mtime":1671040805866},{"name":"@restart/hooks/useEventCallback","loc":{"line":1,"column":29,"index":29},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useEventCallback.js"},{"name":"@restart/hooks/useUpdateEffect","loc":{"line":2,"column":28,"index":92},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useUpdateEffect.js"},{"name":"@restart/hooks/useCommittedRef","loc":{"line":3,"column":28,"index":154},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useCommittedRef.js"},{"name":"@restart/hooks/useTimeout","loc":{"line":4,"column":23,"index":211},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useTimeout.js"},{"name":"@restart/ui/Anchor","loc":{"line":5,"column":19,"index":259},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/Anchor.js"},{"name":"classnames","loc":{"line":6,"column":23,"index":304},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/classnames/index.js"},{"name":"react","loc":{"line":8,"column":87,"index":437},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"uncontrollable","loc":{"line":9,"column":32,"index":478},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/uncontrollable/lib/esm/index.js"},{"name":"./CarouselCaption","loc":{"line":10,"column":28,"index":524},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/CarouselCaption.js"},{"name":"./CarouselItem","loc":{"line":11,"column":25,"index":570},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/CarouselItem.js"},{"name":"./ElementChildren","loc":{"line":12,"column":29,"index":617},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/ElementChildren.js"},{"name":"./ThemeProvider","loc":{"line":13,"column":45,"index":683},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/ThemeProvider.js"},{"name":"./transitionEndListener","loc":{"line":14,"column":34,"index":736},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/transitionEndListener.js"},{"name":"./triggerBrowserReflow","loc":{"line":15,"column":33,"index":796},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/triggerBrowserReflow.js"},{"name":"./TransitionWrapper","loc":{"line":16,"column":30,"index":852},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react-bootstrap/esm/TransitionWrapper.js"},{"name":"react/jsx-runtime","loc":{"line":19,"column":38,"index":1013},"parent":"/home/claudio/neo/node_modules/react-bootstrap/esm/Carousel.js","resolved":"/home/claudio/neo/node_modules/react/jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _useEventCallback = _interopRequireDefault(require(\"@restart/hooks/useEventCallback\"));\nvar _useUpdateEffect = _interopRequireDefault(require(\"@restart/hooks/useUpdateEffect\"));\nvar _useCommittedRef = _interopRequireDefault(require(\"@restart/hooks/useCommittedRef\"));\nvar _useTimeout = _interopRequireDefault(require(\"@restart/hooks/useTimeout\"));\nvar _Anchor = _interopRequireDefault(require(\"@restart/ui/Anchor\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _uncontrollable = require(\"uncontrollable\");\nvar _CarouselCaption = _interopRequireDefault(require(\"./CarouselCaption\"));\nvar _CarouselItem = _interopRequireDefault(require(\"./CarouselItem\"));\nvar _ElementChildren = require(\"./ElementChildren\");\nvar _ThemeProvider = require(\"./ThemeProvider\");\nvar _transitionEndListener = _interopRequireDefault(require(\"./transitionEndListener\"));\nvar _triggerBrowserReflow = _interopRequireDefault(require(\"./triggerBrowserReflow\"));\nvar _TransitionWrapper = _interopRequireDefault(require(\"./TransitionWrapper\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst SWIPE_THRESHOLD = 40;\nconst defaultProps = {\n  slide: true,\n  fade: false,\n  controls: true,\n  indicators: true,\n  indicatorLabels: [],\n  defaultActiveIndex: 0,\n  interval: 5000,\n  keyboard: true,\n  pause: 'hover',\n  wrap: true,\n  touch: true,\n  prevIcon: /*#__PURE__*/(0, _jsxRuntime.jsx)(\"span\", {\n    \"aria-hidden\": \"true\",\n    className: \"carousel-control-prev-icon\"\n  }),\n  prevLabel: 'Previous',\n  nextIcon: /*#__PURE__*/(0, _jsxRuntime.jsx)(\"span\", {\n    \"aria-hidden\": \"true\",\n    className: \"carousel-control-next-icon\"\n  }),\n  nextLabel: 'Next'\n};\nfunction isVisible(element) {\n  if (!element || !element.style || !element.parentNode || !element.parentNode.style) {\n    return false;\n  }\n  const elementStyle = getComputedStyle(element);\n  return elementStyle.display !== 'none' && elementStyle.visibility !== 'hidden' && getComputedStyle(element.parentNode).display !== 'none';\n}\nconst Carousel = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    bsPrefix,\n    slide,\n    fade,\n    controls,\n    indicators,\n    indicatorLabels,\n    activeIndex,\n    onSelect,\n    onSlide,\n    onSlid,\n    interval,\n    keyboard,\n    onKeyDown,\n    pause,\n    onMouseOver,\n    onMouseOut,\n    wrap,\n    touch,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    prevIcon,\n    prevLabel,\n    nextIcon,\n    nextLabel,\n    variant,\n    className,\n    children,\n    ...props\n  } = (0, _uncontrollable.useUncontrolled)(uncontrolledProps, {\n    activeIndex: 'onSelect'\n  });\n  const prefix = (0, _ThemeProvider.useBootstrapPrefix)(bsPrefix, 'carousel');\n  const isRTL = (0, _ThemeProvider.useIsRTL)();\n  const nextDirectionRef = (0, React.useRef)(null);\n  const [direction, setDirection] = (0, React.useState)('next');\n  const [paused, setPaused] = (0, React.useState)(false);\n  const [isSliding, setIsSliding] = (0, React.useState)(false);\n  const [renderedActiveIndex, setRenderedActiveIndex] = (0, React.useState)(activeIndex || 0);\n  (0, React.useEffect)(() => {\n    if (!isSliding && activeIndex !== renderedActiveIndex) {\n      if (nextDirectionRef.current) {\n        setDirection(nextDirectionRef.current);\n      } else {\n        setDirection((activeIndex || 0) > renderedActiveIndex ? 'next' : 'prev');\n      }\n      if (slide) {\n        setIsSliding(true);\n      }\n      setRenderedActiveIndex(activeIndex || 0);\n    }\n  }, [activeIndex, isSliding, renderedActiveIndex, slide]);\n  (0, React.useEffect)(() => {\n    if (nextDirectionRef.current) {\n      nextDirectionRef.current = null;\n    }\n  });\n  let numChildren = 0;\n  let activeChildInterval;\n\n  // Iterate to grab all of the children's interval values\n  // (and count them, too)\n  (0, _ElementChildren.forEach)(children, (child, index) => {\n    ++numChildren;\n    if (index === activeIndex) {\n      activeChildInterval = child.props.interval;\n    }\n  });\n  const activeChildIntervalRef = (0, _useCommittedRef.default)(activeChildInterval);\n  const prev = (0, React.useCallback)(event => {\n    if (isSliding) {\n      return;\n    }\n    let nextActiveIndex = renderedActiveIndex - 1;\n    if (nextActiveIndex < 0) {\n      if (!wrap) {\n        return;\n      }\n      nextActiveIndex = numChildren - 1;\n    }\n    nextDirectionRef.current = 'prev';\n    onSelect == null ? void 0 : onSelect(nextActiveIndex, event);\n  }, [isSliding, renderedActiveIndex, onSelect, wrap, numChildren]);\n\n  // This is used in the setInterval, so it should not invalidate.\n  const next = (0, _useEventCallback.default)(event => {\n    if (isSliding) {\n      return;\n    }\n    let nextActiveIndex = renderedActiveIndex + 1;\n    if (nextActiveIndex >= numChildren) {\n      if (!wrap) {\n        return;\n      }\n      nextActiveIndex = 0;\n    }\n    nextDirectionRef.current = 'next';\n    onSelect == null ? void 0 : onSelect(nextActiveIndex, event);\n  });\n  const elementRef = (0, React.useRef)();\n  (0, React.useImperativeHandle)(ref, () => ({\n    element: elementRef.current,\n    prev,\n    next\n  }));\n\n  // This is used in the setInterval, so it should not invalidate.\n  const nextWhenVisible = (0, _useEventCallback.default)(() => {\n    if (!document.hidden && isVisible(elementRef.current)) {\n      if (isRTL) {\n        prev();\n      } else {\n        next();\n      }\n    }\n  });\n  const slideDirection = direction === 'next' ? 'start' : 'end';\n  (0, _useUpdateEffect.default)(() => {\n    if (slide) {\n      // These callbacks will be handled by the <Transition> callbacks.\n      return;\n    }\n    onSlide == null ? void 0 : onSlide(renderedActiveIndex, slideDirection);\n    onSlid == null ? void 0 : onSlid(renderedActiveIndex, slideDirection);\n  }, [renderedActiveIndex]);\n  const orderClassName = `${prefix}-item-${direction}`;\n  const directionalClassName = `${prefix}-item-${slideDirection}`;\n  const handleEnter = (0, React.useCallback)(node => {\n    (0, _triggerBrowserReflow.default)(node);\n    onSlide == null ? void 0 : onSlide(renderedActiveIndex, slideDirection);\n  }, [onSlide, renderedActiveIndex, slideDirection]);\n  const handleEntered = (0, React.useCallback)(() => {\n    setIsSliding(false);\n    onSlid == null ? void 0 : onSlid(renderedActiveIndex, slideDirection);\n  }, [onSlid, renderedActiveIndex, slideDirection]);\n  const handleKeyDown = (0, React.useCallback)(event => {\n    if (keyboard && !/input|textarea/i.test(event.target.tagName)) {\n      switch (event.key) {\n        case 'ArrowLeft':\n          event.preventDefault();\n          if (isRTL) {\n            next(event);\n          } else {\n            prev(event);\n          }\n          return;\n        case 'ArrowRight':\n          event.preventDefault();\n          if (isRTL) {\n            prev(event);\n          } else {\n            next(event);\n          }\n          return;\n        default:\n      }\n    }\n    onKeyDown == null ? void 0 : onKeyDown(event);\n  }, [keyboard, onKeyDown, prev, next, isRTL]);\n  const handleMouseOver = (0, React.useCallback)(event => {\n    if (pause === 'hover') {\n      setPaused(true);\n    }\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [pause, onMouseOver]);\n  const handleMouseOut = (0, React.useCallback)(event => {\n    setPaused(false);\n    onMouseOut == null ? void 0 : onMouseOut(event);\n  }, [onMouseOut]);\n  const touchStartXRef = (0, React.useRef)(0);\n  const touchDeltaXRef = (0, React.useRef)(0);\n  const touchUnpauseTimeout = (0, _useTimeout.default)();\n  const handleTouchStart = (0, React.useCallback)(event => {\n    touchStartXRef.current = event.touches[0].clientX;\n    touchDeltaXRef.current = 0;\n    if (pause === 'hover') {\n      setPaused(true);\n    }\n    onTouchStart == null ? void 0 : onTouchStart(event);\n  }, [pause, onTouchStart]);\n  const handleTouchMove = (0, React.useCallback)(event => {\n    if (event.touches && event.touches.length > 1) {\n      touchDeltaXRef.current = 0;\n    } else {\n      touchDeltaXRef.current = event.touches[0].clientX - touchStartXRef.current;\n    }\n    onTouchMove == null ? void 0 : onTouchMove(event);\n  }, [onTouchMove]);\n  const handleTouchEnd = (0, React.useCallback)(event => {\n    if (touch) {\n      const touchDeltaX = touchDeltaXRef.current;\n      if (Math.abs(touchDeltaX) > SWIPE_THRESHOLD) {\n        if (touchDeltaX > 0) {\n          prev(event);\n        } else {\n          next(event);\n        }\n      }\n    }\n    if (pause === 'hover') {\n      touchUnpauseTimeout.set(() => {\n        setPaused(false);\n      }, interval || undefined);\n    }\n    onTouchEnd == null ? void 0 : onTouchEnd(event);\n  }, [touch, pause, prev, next, touchUnpauseTimeout, interval, onTouchEnd]);\n  const shouldPlay = interval != null && !paused && !isSliding;\n  const intervalHandleRef = (0, React.useRef)();\n  (0, React.useEffect)(() => {\n    var _ref, _activeChildIntervalR;\n    if (!shouldPlay) {\n      return undefined;\n    }\n    const nextFunc = isRTL ? prev : next;\n    intervalHandleRef.current = window.setInterval(document.visibilityState ? nextWhenVisible : nextFunc, (_ref = (_activeChildIntervalR = activeChildIntervalRef.current) != null ? _activeChildIntervalR : interval) != null ? _ref : undefined);\n    return () => {\n      if (intervalHandleRef.current !== null) {\n        clearInterval(intervalHandleRef.current);\n      }\n    };\n  }, [shouldPlay, prev, next, activeChildIntervalRef, interval, nextWhenVisible, isRTL]);\n  const indicatorOnClicks = (0, React.useMemo)(() => indicators && Array.from({\n    length: numChildren\n  }, (_, index) => event => {\n    onSelect == null ? void 0 : onSelect(index, event);\n  }), [indicators, numChildren, onSelect]);\n  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Component, {\n    ref: elementRef,\n    ...props,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n    className: (0, _classnames.default)(className, prefix, slide && 'slide', fade && `${prefix}-fade`, variant && `${prefix}-${variant}`),\n    children: [indicators && /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", {\n      className: `${prefix}-indicators`,\n      children: (0, _ElementChildren.map)(children, (_, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)(\"button\", {\n        type: \"button\",\n        \"data-bs-target\": \"\" // Bootstrap requires this in their css.\n        ,\n\n        \"aria-label\": indicatorLabels != null && indicatorLabels.length ? indicatorLabels[index] : `Slide ${index + 1}`,\n        className: index === renderedActiveIndex ? 'active' : undefined,\n        onClick: indicatorOnClicks ? indicatorOnClicks[index] : undefined,\n        \"aria-current\": index === renderedActiveIndex\n      }, index))\n    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", {\n      className: `${prefix}-inner`,\n      children: (0, _ElementChildren.map)(children, (child, index) => {\n        const isActive = index === renderedActiveIndex;\n        return slide ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_TransitionWrapper.default, {\n          in: isActive,\n          onEnter: isActive ? handleEnter : undefined,\n          onEntered: isActive ? handleEntered : undefined,\n          addEndListener: _transitionEndListener.default,\n          children: (status, innerProps) => /*#__PURE__*/React.cloneElement(child, {\n            ...innerProps,\n            className: (0, _classnames.default)(child.props.className, isActive && status !== 'entered' && orderClassName, (status === 'entered' || status === 'exiting') && 'active', (status === 'entering' || status === 'exiting') && directionalClassName)\n          })\n        }) : /*#__PURE__*/React.cloneElement(child, {\n          className: (0, _classnames.default)(child.props.className, isActive && 'active')\n        });\n      })\n    }), controls && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {\n      children: [(wrap || activeIndex !== 0) && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Anchor.default, {\n        className: `${prefix}-control-prev`,\n        onClick: prev,\n        children: [prevIcon, prevLabel && /*#__PURE__*/(0, _jsxRuntime.jsx)(\"span\", {\n          className: \"visually-hidden\",\n          children: prevLabel\n        })]\n      }), (wrap || activeIndex !== numChildren - 1) && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Anchor.default, {\n        className: `${prefix}-control-next`,\n        onClick: next,\n        children: [nextIcon, nextLabel && /*#__PURE__*/(0, _jsxRuntime.jsx)(\"span\", {\n          className: \"visually-hidden\",\n          children: nextLabel\n        })]\n      })]\n    })]\n  });\n});\nCarousel.displayName = 'Carousel';\nCarousel.defaultProps = defaultProps;\nvar _default = Object.assign(Carousel, {\n  Caption: _CarouselCaption.default,\n  Item: _CarouselItem.default\n});\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"c33f493e420b5e4f5fef0af9f4f10466","cacheData":{"env":{}}}