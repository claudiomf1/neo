{"id":"kfy6","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/dom-helpers/package.json","includedInParent":true,"mtime":1671040804990},{"name":"./canUseDOM","loc":{"line":2,"column":22,"index":60},"parent":"/home/claudio/neo/node_modules/dom-helpers/esm/addEventListener.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/canUseDOM.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.optionsSupported = exports.onceSupported = exports.default = void 0;\nvar _canUseDOM = _interopRequireDefault(require(\"./canUseDOM\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/* eslint-disable no-return-assign */\n\nvar optionsSupported = false;\nexports.optionsSupported = optionsSupported;\nvar onceSupported = false;\nexports.onceSupported = onceSupported;\ntry {\n  var options = {\n    get passive() {\n      return exports.optionsSupported = optionsSupported = true;\n    },\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return exports.onceSupported = onceSupported = exports.optionsSupported = optionsSupported = true;\n    }\n  };\n  if (_canUseDOM.default) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n      capture = options.capture;\n    var wrappedHandler = handler;\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n      handler.__once = wrappedHandler;\n    }\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n  node.addEventListener(eventName, handler, options);\n}\nvar _default = addEventListener;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"a9428f04a56489108fa6e13167f4cc34","cacheData":{"env":{}}}