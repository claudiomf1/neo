{"id":"ewtr","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/ui/package.json","includedInParent":true,"mtime":1671040804690},{"name":"react","loc":{"line":6,"column":23,"index":409},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"@restart/hooks/useCallbackRef","loc":{"line":7,"column":27,"index":445},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useCallbackRef.js"},{"name":"./DropdownContext","loc":{"line":8,"column":28,"index":506},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownContext.js"},{"name":"./usePopper","loc":{"line":9,"column":22,"index":549},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/usePopper.js"},{"name":"./useClickOutside","loc":{"line":10,"column":28,"index":592},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/useClickOutside.js"},{"name":"./mergeOptionsWithPopperConfig","loc":{"line":11,"column":41,"index":654},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/mergeOptionsWithPopperConfig.js"},{"name":"react/jsx-runtime","loc":{"line":13,"column":28,"index":775},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js","resolved":"/home/claudio/neo/node_modules/react/jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.useDropdownMenu = useDropdownMenu;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useCallbackRef = _interopRequireDefault(require(\"@restart/hooks/useCallbackRef\"));\nvar _DropdownContext = _interopRequireDefault(require(\"./DropdownContext\"));\nvar _usePopper = _interopRequireDefault(require(\"./usePopper\"));\nvar _useClickOutside = _interopRequireDefault(require(\"./useClickOutside\"));\nvar _mergeOptionsWithPopperConfig = _interopRequireDefault(require(\"./mergeOptionsWithPopperConfig\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst _excluded = [\"children\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nconst noop = () => {};\n/**\n * @memberOf Dropdown\n * @param {object}  options\n * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection\n * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle\n * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`\n * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.\n * @param {string}  options.rootCloseEvent The pointer event to listen for when determining \"clicks outside\" the menu for triggering a close.\n * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.\n */\n\nfunction useDropdownMenu(options = {}) {\n  const context = (0, React.useContext)(_DropdownContext.default);\n  const [arrowElement, attachArrowRef] = (0, _useCallbackRef.default)();\n  const hasShownRef = (0, React.useRef)(false);\n  const {\n    flip,\n    offset,\n    rootCloseEvent,\n    fixed = false,\n    placement: placementOverride,\n    popperConfig = {},\n    enableEventListeners = true,\n    usePopper: shouldUsePopper = !!context\n  } = options;\n  const show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;\n  if (show && !hasShownRef.current) {\n    hasShownRef.current = true;\n  }\n  const handleClose = e => {\n    context == null ? void 0 : context.toggle(false, e);\n  };\n  const {\n    placement,\n    setMenu,\n    menuElement,\n    toggleElement\n  } = context || {};\n  const popper = (0, _usePopper.default)(toggleElement, menuElement, (0, _mergeOptionsWithPopperConfig.default)({\n    placement: placementOverride || placement || 'bottom-start',\n    enabled: shouldUsePopper,\n    enableEvents: enableEventListeners == null ? show : enableEventListeners,\n    offset,\n    flip,\n    fixed,\n    arrowElement,\n    popperConfig\n  }));\n  const menuProps = Object.assign({\n    ref: setMenu || noop,\n    'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id\n  }, popper.attributes.popper, {\n    style: popper.styles.popper\n  });\n  const metadata = {\n    show,\n    placement,\n    hasShown: hasShownRef.current,\n    toggle: context == null ? void 0 : context.toggle,\n    popper: shouldUsePopper ? popper : null,\n    arrowProps: shouldUsePopper ? Object.assign({\n      ref: attachArrowRef\n    }, popper.attributes.arrow, {\n      style: popper.styles.arrow\n    }) : {}\n  };\n  (0, _useClickOutside.default)(menuElement, handleClose, {\n    clickTrigger: rootCloseEvent,\n    disabled: !show\n  });\n  return [menuProps, metadata];\n}\nconst defaultProps = {\n  usePopper: true\n};\n\n/**\n * Also exported as `<Dropdown.Menu>` from `Dropdown`.\n *\n * @displayName DropdownMenu\n * @memberOf Dropdown\n */\nfunction DropdownMenu(_ref) {\n  let {\n      children\n    } = _ref,\n    options = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [props, meta] = useDropdownMenu(options);\n  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {\n    children: children(props, meta)\n  });\n}\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\n/** @component */\nvar _default = DropdownMenu;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"a28fca195c46e9dee3599e778b134cf9","cacheData":{"env":{}}}