{"id":"WcEt","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1671040804526},{"name":"react","loc":{"line":1,"column":25,"index":25},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useResizeObserver.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"./useIsomorphicEffect","loc":{"line":2,"column":22,"index":56},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useResizeObserver.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useIsomorphicEffect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useResizeObserver;\nvar _react = require(\"react\");\nvar _useIsomorphicEffect = _interopRequireDefault(require(\"./useIsomorphicEffect\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar targetMap = new WeakMap();\nvar resizeObserver;\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\n\nfunction useResizeObserver(element) {\n  var _useState = (0, _react.useState)(null),\n    rect = _useState[0],\n    setRect = _useState[1];\n  (0, _useIsomorphicEffect.default)(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}"},"sourceMaps":null,"error":null,"hash":"a2630db70720045dc764b03e87a47d46","cacheData":{"env":{}}}