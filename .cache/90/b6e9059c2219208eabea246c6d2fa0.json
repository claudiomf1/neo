{"id":"KpYd","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/ui/package.json","includedInParent":true,"mtime":1671040804690},{"name":"react","loc":{"line":6,"column":27,"index":417},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"@restart/hooks/useEventCallback","loc":{"line":7,"column":29,"index":455},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useEventCallback.js"},{"name":"./NavContext","loc":{"line":8,"column":23,"index":513},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/NavContext.js"},{"name":"./SelectableContext","loc":{"line":9,"column":48,"index":577},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/SelectableContext.js"},{"name":"./Button","loc":{"line":10,"column":19,"index":619},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/Button.js"},{"name":"./DataKey","loc":{"line":11,"column":25,"index":656},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DataKey.js"},{"name":"./TabContext","loc":{"line":12,"column":23,"index":692},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/TabContext.js"},{"name":"react/jsx-runtime","loc":{"line":13,"column":28,"index":736},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/NavItem.js","resolved":"/home/claudio/neo/node_modules/react/jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.useNavItem = useNavItem;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@restart/hooks/useEventCallback\"));\nvar _NavContext = _interopRequireDefault(require(\"./NavContext\"));\nvar _SelectableContext = _interopRequireWildcard(require(\"./SelectableContext\"));\nvar _Button = _interopRequireDefault(require(\"./Button\"));\nvar _DataKey = require(\"./DataKey\");\nvar _TabContext = _interopRequireDefault(require(\"./TabContext\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst _excluded = [\"as\", \"active\", \"eventKey\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction useNavItem({\n  key,\n  onClick,\n  active,\n  id,\n  role,\n  disabled\n}) {\n  const parentOnSelect = (0, React.useContext)(_SelectableContext.default);\n  const navContext = (0, React.useContext)(_NavContext.default);\n  const tabContext = (0, React.useContext)(_TabContext.default);\n  let isActive = active;\n  const props = {\n    role\n  };\n  if (navContext) {\n    if (!role && navContext.role === 'tablist') props.role = 'tab';\n    const contextControllerId = navContext.getControllerId(key != null ? key : null);\n    const contextControlledId = navContext.getControlledId(key != null ? key : null); // @ts-ignore\n\n    props[(0, _DataKey.dataAttr)('event-key')] = key;\n    props.id = contextControllerId || id;\n    isActive = active == null && key != null ? navContext.activeKey === key : active;\n    /**\n     * Simplified scenario for `mountOnEnter`.\n     *\n     * While it would make sense to keep 'aria-controls' for tabs that have been mounted at least\n     * once, it would also complicate the code quite a bit, for very little gain.\n     * The following implementation is probably good enough.\n     *\n     * @see https://github.com/react-restart/ui/pull/40#issuecomment-1009971561\n     */\n\n    if (isActive || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter)) props['aria-controls'] = contextControlledId;\n  }\n  if (props.role === 'tab') {\n    props['aria-selected'] = isActive;\n    if (!isActive) {\n      props.tabIndex = -1;\n    }\n    if (disabled) {\n      props.tabIndex = -1;\n      props['aria-disabled'] = true;\n    }\n  }\n  props.onClick = (0, _useEventCallback.default)(e => {\n    if (disabled) return;\n    onClick == null ? void 0 : onClick(e);\n    if (key == null) {\n      return;\n    }\n    if (parentOnSelect && !e.isPropagationStopped()) {\n      parentOnSelect(key, e);\n    }\n  });\n  return [props, {\n    isActive\n  }];\n}\nconst NavItem = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: Component = _Button.default,\n      active,\n      eventKey\n    } = _ref,\n    options = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [props, meta] = useNavItem(Object.assign({\n    key: (0, _SelectableContext.makeEventKey)(eventKey, options.href),\n    active\n  }, options)); // @ts-ignore\n\n  props[(0, _DataKey.dataAttr)('active')] = meta.isActive;\n  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, Object.assign({}, options, props, {\n    ref: ref\n  }));\n});\nNavItem.displayName = 'NavItem';\nvar _default = NavItem;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"61d882dd9b6a4a0a4d7ae1f3bc5de8f3","cacheData":{"env":{}}}