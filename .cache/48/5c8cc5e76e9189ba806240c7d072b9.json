{"id":"RArq","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/ui/package.json","includedInParent":true,"mtime":1671040804690},{"name":"dom-helpers/activeElement","loc":{"line":6,"column":26,"index":802},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/activeElement.js"},{"name":"dom-helpers/contains","loc":{"line":7,"column":21,"index":852},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/contains.js"},{"name":"dom-helpers/canUseDOM","loc":{"line":8,"column":22,"index":898},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/canUseDOM.js"},{"name":"dom-helpers/listen","loc":{"line":9,"column":19,"index":942},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/listen.js"},{"name":"react","loc":{"line":11,"column":23,"index":1086},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"react-dom","loc":{"line":12,"column":21,"index":1116},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/react-dom/index.js"},{"name":"@restart/hooks/useMounted","loc":{"line":13,"column":23,"index":1152},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useMounted.js"},{"name":"@restart/hooks/useWillUnmount","loc":{"line":14,"column":27,"index":1208},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useWillUnmount.js"},{"name":"@restart/hooks/usePrevious","loc":{"line":15,"column":24,"index":1265},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/usePrevious.js"},{"name":"@restart/hooks/useEventCallback","loc":{"line":16,"column":29,"index":1324},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useEventCallback.js"},{"name":"./ModalManager","loc":{"line":17,"column":25,"index":1384},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/ModalManager.js"},{"name":"./useWaitForDOMRef","loc":{"line":18,"column":29,"index":1431},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/useWaitForDOMRef.js"},{"name":"./useWindow","loc":{"line":19,"column":22,"index":1475},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/useWindow.js"},{"name":"react/jsx-runtime","loc":{"line":22,"column":30,"index":1628},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Modal.js","resolved":"/home/claudio/neo/node_modules/react/jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _activeElement = _interopRequireDefault(require(\"dom-helpers/activeElement\"));\nvar _contains = _interopRequireDefault(require(\"dom-helpers/contains\"));\nvar _canUseDOM = _interopRequireDefault(require(\"dom-helpers/canUseDOM\"));\nvar _listen = _interopRequireDefault(require(\"dom-helpers/listen\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _useMounted = _interopRequireDefault(require(\"@restart/hooks/useMounted\"));\nvar _useWillUnmount = _interopRequireDefault(require(\"@restart/hooks/useWillUnmount\"));\nvar _usePrevious = _interopRequireDefault(require(\"@restart/hooks/usePrevious\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@restart/hooks/useEventCallback\"));\nvar _ModalManager = _interopRequireDefault(require(\"./ModalManager\"));\nvar _useWaitForDOMRef = _interopRequireDefault(require(\"./useWaitForDOMRef\"));\nvar _useWindow = _interopRequireDefault(require(\"./useWindow\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst _excluded = [\"show\", \"role\", \"className\", \"style\", \"children\", \"backdrop\", \"keyboard\", \"onBackdropClick\", \"onEscapeKeyDown\", \"transition\", \"backdropTransition\", \"autoFocus\", \"enforceFocus\", \"restoreFocus\", \"restoreFocusOptions\", \"renderDialog\", \"renderBackdrop\", \"manager\", \"container\", \"onShow\", \"onHide\", \"onExit\", \"onExited\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */\n\nlet manager;\nfunction getManager(window) {\n  if (!manager) manager = new _ModalManager.default({\n    ownerDocument: window == null ? void 0 : window.document\n  });\n  return manager;\n}\nfunction useModalManager(provided) {\n  const window = (0, _useWindow.default)();\n  const modalManager = provided || getManager(window);\n  const modal = (0, React.useRef)({\n    dialog: null,\n    backdrop: null\n  });\n  return Object.assign(modal.current, {\n    add: () => modalManager.add(modal.current),\n    remove: () => modalManager.remove(modal.current),\n    isTopModal: () => modalManager.isTopModal(modal.current),\n    setDialogRef: (0, React.useCallback)(ref => {\n      modal.current.dialog = ref;\n    }, []),\n    setBackdropRef: (0, React.useCallback)(ref => {\n      modal.current.backdrop = ref;\n    }, [])\n  });\n}\nconst Modal = /*#__PURE__*/(0, React.forwardRef)((_ref, ref) => {\n  let {\n      show = false,\n      role = 'dialog',\n      className,\n      style,\n      children,\n      backdrop = true,\n      keyboard = true,\n      onBackdropClick,\n      onEscapeKeyDown,\n      transition,\n      backdropTransition,\n      autoFocus = true,\n      enforceFocus = true,\n      restoreFocus = true,\n      restoreFocusOptions,\n      renderDialog,\n      renderBackdrop = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", Object.assign({}, props)),\n      manager: providedManager,\n      container: containerRef,\n      onShow,\n      onHide = () => {},\n      onExit,\n      onExited,\n      onExiting,\n      onEnter,\n      onEntering,\n      onEntered\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const container = (0, _useWaitForDOMRef.default)(containerRef);\n  const modal = useModalManager(providedManager);\n  const isMounted = (0, _useMounted.default)();\n  const prevShow = (0, _usePrevious.default)(show);\n  const [exited, setExited] = (0, React.useState)(!show);\n  const lastFocusRef = (0, React.useRef)(null);\n  (0, React.useImperativeHandle)(ref, () => modal, [modal]);\n  if (_canUseDOM.default && !prevShow && show) {\n    lastFocusRef.current = (0, _activeElement.default)();\n  }\n  if (!transition && !show && !exited) {\n    setExited(true);\n  } else if (show && exited) {\n    setExited(false);\n  }\n  const handleShow = (0, _useEventCallback.default)(() => {\n    modal.add();\n    removeKeydownListenerRef.current = (0, _listen.default)(document, 'keydown', handleDocumentKeyDown);\n    removeFocusListenerRef.current = (0, _listen.default)(document, 'focus',\n    // the timeout is necessary b/c this will run before the new modal is mounted\n    // and so steals focus from it\n    () => setTimeout(handleEnforceFocus), true);\n    if (onShow) {\n      onShow();\n    } // autofocus after onShow to not trigger a focus event for previous\n    // modals before this one is shown.\n\n    if (autoFocus) {\n      const currentActiveElement = (0, _activeElement.default)(document);\n      if (modal.dialog && currentActiveElement && !(0, _contains.default)(modal.dialog, currentActiveElement)) {\n        lastFocusRef.current = currentActiveElement;\n        modal.dialog.focus();\n      }\n    }\n  });\n  const handleHide = (0, _useEventCallback.default)(() => {\n    modal.remove();\n    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();\n    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();\n    if (restoreFocus) {\n      var _lastFocusRef$current;\n\n      // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);\n      lastFocusRef.current = null;\n    }\n  }); // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120\n  // Show logic when:\n  //  - show is `true` _and_ `container` has resolved\n\n  (0, React.useEffect)(() => {\n    if (!show || !container) return;\n    handleShow();\n  }, [show, container, /* should never change: */\n  handleShow]); // Hide cleanup logic when:\n  //  - `exited` switches to true\n  //  - component unmounts;\n\n  (0, React.useEffect)(() => {\n    if (!exited) return;\n    handleHide();\n  }, [exited, handleHide]);\n  (0, _useWillUnmount.default)(() => {\n    handleHide();\n  }); // --------------------------------\n\n  const handleEnforceFocus = (0, _useEventCallback.default)(() => {\n    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {\n      return;\n    }\n    const currentActiveElement = (0, _activeElement.default)();\n    if (modal.dialog && currentActiveElement && !(0, _contains.default)(modal.dialog, currentActiveElement)) {\n      modal.dialog.focus();\n    }\n  });\n  const handleBackdropClick = (0, _useEventCallback.default)(e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n    onBackdropClick == null ? void 0 : onBackdropClick(e);\n    if (backdrop === true) {\n      onHide();\n    }\n  });\n  const handleDocumentKeyDown = (0, _useEventCallback.default)(e => {\n    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {\n      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);\n      if (!e.defaultPrevented) {\n        onHide();\n      }\n    }\n  });\n  const removeFocusListenerRef = (0, React.useRef)();\n  const removeKeydownListenerRef = (0, React.useRef)();\n  const handleHidden = (...args) => {\n    setExited(true);\n    onExited == null ? void 0 : onExited(...args);\n  };\n  const Transition = transition;\n  if (!container || !(show || Transition && !exited)) {\n    return null;\n  }\n  const dialogProps = Object.assign({\n    role,\n    ref: modal.setDialogRef,\n    // apparently only works on the dialog role element\n    'aria-modal': role === 'dialog' ? true : undefined\n  }, rest, {\n    style,\n    className,\n    tabIndex: -1\n  });\n  let dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", Object.assign({}, dialogProps, {\n    children: /*#__PURE__*/React.cloneElement(children, {\n      role: 'document'\n    })\n  }));\n  if (Transition) {\n    dialog = /*#__PURE__*/(0, _jsxRuntime.jsx)(Transition, {\n      appear: true,\n      unmountOnExit: true,\n      in: !!show,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: handleHidden,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      children: dialog\n    });\n  }\n  let backdropElement = null;\n  if (backdrop) {\n    const BackdropTransition = backdropTransition;\n    backdropElement = renderBackdrop({\n      ref: modal.setBackdropRef,\n      onClick: handleBackdropClick\n    });\n    if (BackdropTransition) {\n      backdropElement = /*#__PURE__*/(0, _jsxRuntime.jsx)(BackdropTransition, {\n        appear: true,\n        in: !!show,\n        children: backdropElement\n      });\n    }\n  }\n  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {\n    children: /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {\n      children: [backdropElement, dialog]\n    }), container)\n  });\n});\nModal.displayName = 'Modal';\nvar _default = Object.assign(Modal, {\n  Manager: _ModalManager.default\n});\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"2bbd0f60dc8cc8d6f203c746090a9861","cacheData":{"env":{}}}