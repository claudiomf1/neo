{"id":"ipfL","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/ui/package.json","includedInParent":true,"mtime":1671040804690},{"name":"dom-helpers/listen","loc":{"line":1,"column":19,"index":19},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/useRootClose.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/listen.js"},{"name":"dom-helpers/ownerDocument","loc":{"line":2,"column":26,"index":67},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/useRootClose.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/ownerDocument.js"},{"name":"react","loc":{"line":3,"column":26,"index":122},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/useRootClose.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"@restart/hooks/useEventCallback","loc":{"line":4,"column":29,"index":160},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/useRootClose.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useEventCallback.js"},{"name":"./useClickOutside","loc":{"line":5,"column":46,"index":241},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/useRootClose.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/useClickOutside.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _listen = _interopRequireDefault(require(\"dom-helpers/listen\"));\nvar _ownerDocument = _interopRequireDefault(require(\"dom-helpers/ownerDocument\"));\nvar _react = require(\"react\");\nvar _useEventCallback = _interopRequireDefault(require(\"@restart/hooks/useEventCallback\"));\nvar _useClickOutside = _interopRequireWildcard(require(\"./useClickOutside\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst escapeKeyCode = 27;\nconst noop = () => {};\n\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\nfunction useRootClose(ref, onRootClose, {\n  disabled,\n  clickTrigger\n} = {}) {\n  const onClose = onRootClose || noop;\n  (0, _useClickOutside.default)(ref, onClose, {\n    disabled,\n    clickTrigger\n  });\n  const handleKeyUp = (0, _useEventCallback.default)(e => {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  (0, _react.useEffect)(() => {\n    if (disabled || ref == null) return undefined;\n    const doc = (0, _ownerDocument.default)((0, _useClickOutside.getRefTarget)(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = (doc.defaultView || window).event;\n    const removeKeyupListener = (0, _listen.default)(doc, 'keyup', e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleKeyUp(e);\n    });\n    return () => {\n      removeKeyupListener();\n    };\n  }, [ref, disabled, handleKeyUp]);\n}\nvar _default = useRootClose;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"d5b409b355f946e2ad274ae8341614c2","cacheData":{"env":{}}}