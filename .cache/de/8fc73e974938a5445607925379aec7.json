{"id":"DeAn","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1671040804526},{"name":"react","loc":{"line":1,"column":34,"index":34},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useUpdateEffect.js","resolved":"/home/claudio/neo/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = require(\"react\");\n/**\n * Runs an effect only when the dependencies have changed, skipping the\n * initial \"on mount\" run. Caution, if the dependency list never changes,\n * the effect is **never run**\n *\n * ```ts\n *  const ref = useRef<HTMLInput>(null);\n *\n *  // focuses an element only if the focus changes, and not on mount\n *  useUpdateEffect(() => {\n *    const element = ref.current?.children[focusedIdx] as HTMLElement\n *\n *    element?.focus()\n *\n *  }, [focusedIndex])\n * ```\n * @param effect An effect to run on mount\n *\n * @category effects\n */\n\nfunction useUpdateEffect(fn, deps) {\n  var isFirst = (0, _react.useRef)(true);\n  (0, _react.useEffect)(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n    return fn();\n  }, deps);\n}\nvar _default = useUpdateEffect;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"349d5e8fae276c53eb43487839bbb4ac","cacheData":{"env":{}}}