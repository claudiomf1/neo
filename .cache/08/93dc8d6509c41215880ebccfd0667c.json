{"id":"lpme","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1671040804526},{"name":"react","loc":{"line":1,"column":34,"index":34},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useCommittedRef.js","resolved":"/home/claudio/neo/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = require(\"react\");\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nvar _default = useCommittedRef;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"0144ab2b0862924d70748c4a4942bb3d","cacheData":{"env":{}}}