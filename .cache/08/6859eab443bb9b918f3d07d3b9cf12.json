{"id":"MBC5","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1671040804526},{"name":"react","loc":{"line":1,"column":25,"index":25},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useCallbackRef.js","resolved":"/home/claudio/neo/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCallbackRef;\nvar _react = require(\"react\");\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\n\nfunction useCallbackRef() {\n  return (0, _react.useState)(null);\n}"},"sourceMaps":null,"error":null,"hash":"3177aa2652fc848cd98b9c6933be46d8","cacheData":{"env":{}}}