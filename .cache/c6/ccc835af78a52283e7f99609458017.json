{"id":"Vil4","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1671040804526},{"name":"react","loc":{"line":1,"column":32,"index":32},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useTimeout.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"./useMounted","loc":{"line":2,"column":23,"index":64},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useTimeout.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useMounted.js"},{"name":"./useWillUnmount","loc":{"line":3,"column":27,"index":107},"parent":"/home/claudio/neo/node_modules/@restart/hooks/esm/useTimeout.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useWillUnmount.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useTimeout;\nvar _react = require(\"react\");\nvar _useMounted = _interopRequireDefault(require(\"./useMounted\"));\nvar _useWillUnmount = _interopRequireDefault(require(\"./useWillUnmount\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\n\nfunction useTimeout() {\n  var isMounted = (0, _useMounted.default)(); // types are confused between node and web here IDK\n\n  var handleRef = (0, _react.useRef)();\n  (0, _useWillUnmount.default)(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return (0, _react.useMemo)(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n      if (!isMounted()) return;\n      clear();\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}"},"sourceMaps":null,"error":null,"hash":"7126deae9f3f543fc4bbde9818a04bb3","cacheData":{"env":{}}}