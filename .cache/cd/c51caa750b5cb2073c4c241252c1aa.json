{"id":"C6J8","dependencies":[{"name":"/home/claudio/neo/package.json","includedInParent":true,"mtime":1671579531318},{"name":"/home/claudio/neo/node_modules/@restart/ui/package.json","includedInParent":true,"mtime":1671040804690},{"name":"dom-helpers/querySelectorAll","loc":{"line":1,"column":16,"index":16},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/querySelectorAll.js"},{"name":"dom-helpers/addEventListener","loc":{"line":2,"column":29,"index":77},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/dom-helpers/esm/addEventListener.js"},{"name":"react","loc":{"line":4,"column":23,"index":209},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/react/index.js"},{"name":"uncontrollable","loc":{"line":5,"column":36,"index":254},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/uncontrollable/lib/esm/index.js"},{"name":"@restart/hooks/usePrevious","loc":{"line":6,"column":24,"index":296},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/usePrevious.js"},{"name":"@restart/hooks/useForceUpdate","loc":{"line":7,"column":27,"index":353},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useForceUpdate.js"},{"name":"@restart/hooks/useEventListener","loc":{"line":8,"column":29,"index":415},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useEventListener.js"},{"name":"@restart/hooks/useEventCallback","loc":{"line":9,"column":29,"index":479},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/hooks/esm/useEventCallback.js"},{"name":"./DropdownContext","loc":{"line":10,"column":28,"index":542},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownContext.js"},{"name":"./DropdownMenu","loc":{"line":11,"column":25,"index":588},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownMenu.js"},{"name":"./DropdownToggle","loc":{"line":12,"column":43,"index":649},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownToggle.js"},{"name":"./DropdownItem","loc":{"line":13,"column":25,"index":694},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DropdownItem.js"},{"name":"./SelectableContext","loc":{"line":14,"column":30,"index":742},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/SelectableContext.js"},{"name":"./DataKey","loc":{"line":15,"column":25,"index":790},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/DataKey.js"},{"name":"./useWindow","loc":{"line":16,"column":22,"index":825},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/@restart/ui/esm/useWindow.js"},{"name":"react/jsx-runtime","loc":{"line":17,"column":28,"index":868},"parent":"/home/claudio/neo/node_modules/@restart/ui/esm/Dropdown.js","resolved":"/home/claudio/neo/node_modules/react/jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _querySelectorAll = _interopRequireDefault(require(\"dom-helpers/querySelectorAll\"));\nvar _addEventListener = _interopRequireDefault(require(\"dom-helpers/addEventListener\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _uncontrollable = require(\"uncontrollable\");\nvar _usePrevious = _interopRequireDefault(require(\"@restart/hooks/usePrevious\"));\nvar _useForceUpdate = _interopRequireDefault(require(\"@restart/hooks/useForceUpdate\"));\nvar _useEventListener = _interopRequireDefault(require(\"@restart/hooks/useEventListener\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@restart/hooks/useEventCallback\"));\nvar _DropdownContext = _interopRequireDefault(require(\"./DropdownContext\"));\nvar _DropdownMenu = _interopRequireDefault(require(\"./DropdownMenu\"));\nvar _DropdownToggle = _interopRequireWildcard(require(\"./DropdownToggle\"));\nvar _DropdownItem = _interopRequireDefault(require(\"./DropdownItem\"));\nvar _SelectableContext = _interopRequireDefault(require(\"./SelectableContext\"));\nvar _DataKey = require(\"./DataKey\");\nvar _useWindow = _interopRequireDefault(require(\"./useWindow\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction useRefWithUpdate() {\n  const forceUpdate = (0, _useForceUpdate.default)();\n  const ref = (0, React.useRef)(null);\n  const attachRef = (0, React.useCallback)(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\nfunction Dropdown({\n  defaultShow,\n  show: rawShow,\n  onSelect,\n  onToggle: rawOnToggle,\n  itemSelector = `* [${(0, _DataKey.dataAttr)('dropdown-item')}]`,\n  focusFirstItemOnShow,\n  placement = 'bottom-start',\n  children\n}) {\n  const window = (0, _useWindow.default)();\n  const [show, onToggle] = (0, _uncontrollable.useUncontrolledProp)(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = (0, _usePrevious.default)(show);\n  const lastSourceEvent = (0, React.useRef)(null);\n  const focusInDropdown = (0, React.useRef)(false);\n  const onSelectCtx = (0, React.useContext)(_SelectableContext.default);\n  const toggle = (0, React.useCallback)((nextShow, event, source = event == null ? void 0 : event.type) => {\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = (0, _useEventCallback.default)((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = (0, React.useMemo)(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);\n  }\n  const focusToggle = (0, _useEventCallback.default)(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = (0, _useEventCallback.default)(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n    if (focusType == null) {\n      focusType = menuRef.current && (0, _DropdownToggle.isRoleMenu)(menuRef.current) ? 'keyboard' : false;\n    }\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n    const first = (0, _querySelectorAll.default)(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  (0, React.useEffect)(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  (0, React.useEffect)(() => {\n    lastSourceEvent.current = null;\n  });\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = (0, _querySelectorAll.default)(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n  (0, _useEventListener.default)((0, React.useCallback)(() => window.document, [window]), 'keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu || key === 'Escape' && target.type === 'search')) {\n      return;\n    }\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n      case 'ArrowDown':\n        event.preventDefault();\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n        return;\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        (0, _addEventListener.default)(target.ownerDocument, 'keyup', e => {\n          var _menuRef$current2;\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        onToggle(false, meta);\n        break;\n      default:\n    }\n  });\n  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SelectableContext.default.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_DropdownContext.default.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = _DropdownMenu.default;\nDropdown.Toggle = _DropdownToggle.default;\nDropdown.Item = _DropdownItem.default;\nvar _default = Dropdown;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"b0827dfa181a29f04f5495a3ffbb9c9e","cacheData":{"env":{}}}